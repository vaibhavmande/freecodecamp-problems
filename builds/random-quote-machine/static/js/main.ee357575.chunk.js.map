{"version":3,"sources":["components/Actionable/Actionable.tsx","components/QuoteBoxFooter/QuoteBoxFooter.tsx","components/QuoteBox/QuoteBox.tsx","lib/intent.ts","lib/random.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Actionable","id","variant","icon","text","intent","onClick","props","target","withVariant","undefined","className","href","QuoteBoxFooter","setRandomQuote","faTwitter","twitter","faTumblr","tumblr","QuoteBox","quote","twitterShare","encodeURIComponent","tumblrShare","author","createTumblrIntent","faQuoteLeft","COLORS","getRandomBetween","max","Math","round","random","setRandomColorToElement","selector","randomColor","length","getRandomColor","document","getElementById","style","backgroundColor","App","initialState","React","useState","quotes","setQuotes","setQuote","useEffect","fetch","then","response","ok","Error","json","catch","console","error","quotesLength","useMemo","getRandomQuote","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ee357575.chunk.js","sourcesContent":["import { ActionableProps } from \"./Actionable.types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { IconDefinition } from \"@fortawesome/fontawesome-common-types\";\nimport \"./Actionable.css\";\n\nconst withVariant = (\n  variant: \"a\" | \"button\",\n  icon: IconDefinition | null,\n  props: any\n) => {\n  const { text } = props;\n  switch (variant) {\n    case \"a\":\n      return (\n        <a {...props} target=\"_blank\">\n          {icon ? (\n            <FontAwesomeIcon icon={icon as unknown as IconDefinition} />\n          ) : null}\n          {text}\n        </a>\n      );\n    case \"button\":\n      return <button {...props}>{text}</button>;\n  }\n};\n\nconst Actionable = ({\n  id,\n  variant,\n  icon,\n  text,\n  intent,\n  onClick,\n}: ActionableProps) => {\n  return withVariant(variant, icon ?? null, {\n    id: id ?? undefined,\n    text,\n    className: \"actionable\",\n    href: intent ?? \"#\",\n    onClick: onClick ?? (() => {}),\n  });\n};\n\nexport default Actionable;\n","import Actionable from \"../Actionable/Actionable\";\nimport { faTwitter, faTumblr } from \"@fortawesome/free-brands-svg-icons\";\nimport \"./QuoteBoxFooter.css\";\n\ninterface Intent {\n  twitter: string;\n  tumblr: string;\n}\n\ninterface Props {\n  setRandomQuote: () => void;\n  intent: Intent;\n}\n\nconst QuoteBoxFooter = ({ setRandomQuote, intent }: Props): JSX.Element => {\n  return (\n    <div className=\"footer-container\">\n      <div className=\"left\">\n        <Actionable\n          variant=\"a\"\n          icon={faTwitter}\n          id=\"tweet-quote\"\n          intent={intent.twitter}\n        />\n        <Actionable variant=\"a\" icon={faTumblr} intent={intent.tumblr} />\n      </div>\n      <div className=\"right\">\n        <Actionable\n          id=\"new-quote\"\n          variant=\"button\"\n          text=\"New quote\"\n          onClick={setRandomQuote}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default QuoteBoxFooter;\n","import QuoteBoxFooter from \"../QuoteBoxFooter/QuoteBoxFooter\";\nimport { QuoteBoxType } from \"./QuoteBox.types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { createTwitterIntent, createTumblrIntent } from \"../../lib/intent\";\nimport \"./QuoteBox.css\";\n\nconst QuoteBox = ({ quote, setRandomQuote }: QuoteBoxType): JSX.Element => {\n  const twitterShare = createTwitterIntent(quote.quote);\n  const tumblrShare = createTumblrIntent(quote.quote, quote.author);\n\n  return (\n    <div id=\"quote-box\">\n      <div id=\"text\">\n        <FontAwesomeIcon icon={faQuoteLeft} aria-hidden=\"true\" />\n        <p data-testid=\"quote\">{quote.quote}</p>\n      </div>\n      <p id=\"author\">\n        <span aria-hidden=\"true\">-</span> {quote.author}\n      </p>\n      <QuoteBoxFooter\n        setRandomQuote={setRandomQuote}\n        intent={{ twitter: twitterShare, tumblr: tumblrShare }}\n      />\n    </div>\n  );\n};\n\nexport default QuoteBox;\n","const TWIITER = \"https://twitter.com/intent/tweet\";\nconst TUMBLR = \"https://www.tumblr.com/widgets/share/tool\";\n\nexport function createTwitterIntent(text: string): string {\n  return `${TWIITER}?text=${encodeURIComponent(text)}`;\n}\n\nexport function createTumblrIntent(text: string, author: string): string {\n  const postType = \"quote\";\n  const canonicalUrl =\n    \"&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button\";\n\n  const post = `${TUMBLR}?posttype=${postType}&caption=${author}&content=${text}${canonicalUrl}`;\n  return post;\n}\n","const COLORS = [\n  \"#531B76\",\n  \"#579F45\",\n  \"#2B53CA\",\n  \"#8C2A5E\",\n  \"#32677A\",\n  \"#7D9BD4\",\n  \"#896821\",\n  \"#444E20\",\n  \"#555E81\",\n  \"#C32F37\",\n  \"#3D7BB4\",\n  \"#E0487D\",\n  \"#BB47B7\",\n  \"#7E737A\",\n];\n\nexport function getRandomBetween(max: number): number {\n  return Math.round(Math.random() * max);\n}\n\nexport function getRandomColor() {\n  const MAX = COLORS.length;\n\n  const random = getRandomBetween(MAX);\n  return COLORS[random];\n}\n\nexport function setRandomColorToElement(selector: string): void {\n  const randomColor = getRandomColor();\n  const element = document.getElementById(selector) as HTMLElement;\n\n  element.style.backgroundColor = randomColor;\n}\n","import React from \"react\";\nimport QuoteBox from \"./components/QuoteBox/QuoteBox\";\nimport { QuoteType } from \"./App.types\";\nimport { setRandomColorToElement, getRandomBetween } from \"./lib/random\";\nimport \"./App.css\";\n\nfunction App() {\n  const API =\n    \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n  const initialState = {\n    quote: \"\",\n    author: \"\",\n  };\n\n  const [quotes, setQuotes] = React.useState<QuoteType[]>([]);\n  const [quote, setQuote] = React.useState<QuoteType>(initialState);\n\n  const getRandomQuote = (): QuoteType => {\n    const random = Math.round(Math.random() * getRandomBetween(quotesLength));\n    return quotes[random] ?? initialState;\n  };\n\n  React.useEffect(() => {\n    fetch(API)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Unable to fetch quotes\");\n        }\n        return response;\n      })\n      .then((response) => response.json())\n      .then((quotes) => {\n        setQuotes(quotes.quotes);\n        setQuote(quotes.quotes[0]);\n      })\n      .catch(() => console.error(\"Unable to fetch quotes\"));\n  }, []);\n\n  const quotesLength = React.useMemo(() => quotes.length, [quotes]);\n\n  const setRandomQuote = () => {\n    const quote = getRandomQuote();\n    setQuote(quote);\n  };\n\n  // everytime quote changes change background color\n  React.useEffect(() => {\n    if (quote.quote === \"\") return;\n    setRandomColorToElement(\"app\");\n  }, [quote]);\n\n  return (\n    <div className=\"app\" id=\"app\">\n      <QuoteBox quote={quote} setRandomQuote={setRandomQuote} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}